"use strict";(self.webpackChunksailpoint_developer_portal=self.webpackChunksailpoint_developer_portal||[]).push([[28774],{58518:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>m,contentTitle:()=>g,default:()=>y,frontMatter:()=>w,metadata:()=>k,toc:()=>b});var o=t(3905),s=Object.defineProperty,n=Object.defineProperties,l=Object.getOwnPropertyDescriptors,a=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,p=(e,r,t)=>r in e?s(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,h=(e,r)=>{for(var t in r||(r={}))i.call(r,t)&&p(e,t,r[t]);if(a)for(var t of a(r))d.call(r,t)&&p(e,t,r[t]);return e},c=(e,r)=>n(e,l(r)),u=(e,r)=>{var t={};for(var o in e)i.call(e,o)&&r.indexOf(o)<0&&(t[o]=e[o]);if(null!=e&&a)for(var o of a(e))r.indexOf(o)<0&&d.call(e,o)&&(t[o]=e[o]);return t};const w={id:"powershell-sdk-error-handling",title:"Error Handling with the PowerShell SDK",pagination_label:"PowerShell SDK",sidebar_label:"Error Handling",sidebar_position:7,sidebar_class_name:"powershellsdk",keywords:["powershell","sdk","error"],description:"Learn how to delete resources using the PowerShell SDK in this guide.",slug:"/tools/sdk/powershell/error-handling",tags:["SDK"]},g=void 0,k={unversionedId:"tools/sdk/powershell/powershell-sdk-error-handling",id:"tools/sdk/powershell/powershell-sdk-error-handling",title:"Error Handling with the PowerShell SDK",description:"Learn how to delete resources using the PowerShell SDK in this guide.",source:"@site/docs/tools/sdk/powershell/error-handling.md",sourceDirName:"tools/sdk/powershell",slug:"/tools/sdk/powershell/error-handling",permalink:"/docs/tools/sdk/powershell/error-handling",draft:!1,editUrl:"https://github.com/sailpoint-oss/developer-community-site/edit/main/docs/tools/sdk/powershell/error-handling.md",tags:[{label:"SDK",permalink:"/docs/tags/sdk"}],version:"current",lastUpdatedBy:"James Haytko",lastUpdatedAt:1717781542,formattedLastUpdatedAt:"Jun 7, 2024",sidebarPosition:7,frontMatter:{id:"powershell-sdk-error-handling",title:"Error Handling with the PowerShell SDK",pagination_label:"PowerShell SDK",sidebar_label:"Error Handling",sidebar_position:7,sidebar_class_name:"powershellsdk",keywords:["powershell","sdk","error"],description:"Learn how to delete resources using the PowerShell SDK in this guide.",slug:"/tools/sdk/powershell/error-handling",tags:["SDK"]},sidebar:"openApiSidebar",previous:{title:"PowerShell SDK",permalink:"/docs/tools/sdk/powershell/retries"},next:{title:"Python SDK",permalink:"/docs/tools/sdk/python"}},m={},b=[],f={toc:b},S="wrapper";function y(e){var r=e,{components:t}=r,s=u(r,["components"]);return(0,o.kt)(S,c(h(h({},f),s),{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The SDK uses the Invoke-WebRequest cmdlet to handle HTTP requests. Invoke-WebRequest will throw a terminating error for any response that falls out of the range of 2xx. A non-2xx response will immediately halt the program and produce a stack trace."),(0,o.kt)("p",null,"You can use a ",(0,o.kt)("inlineCode",{parentName:"p"},"try/catch")," function to intercept any non success response and take actions on the results, such as logging the message or performing additional actions before exiting the program:"),(0,o.kt)("pre",null,(0,o.kt)("code",h({parentName:"pre"},{className:"language-powershell"}),'# Catch any non 2xx response and log the status code and error message\ntry {\n    Get-Transforms -Filters "id eq"\n}\ncatch {\n    Write-Host $_.Exception.Response.StatusCode.value__\n    Write-Host $_.ErrorDetails\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"catch")," block will handle the error, and the script execution will continue. If you want to stop the scripts execution, include an ",(0,o.kt)("inlineCode",{parentName:"p"},"Exit")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"catch")," block:"),(0,o.kt)("p",null,"This code ensures that the ",(0,o.kt)("inlineCode",{parentName:"p"},"Get-AccessProfiles")," cmdlet will never be called:"),(0,o.kt)("pre",null,(0,o.kt)("code",h({parentName:"pre"},{className:"language-powershell"}),'# Catch any non 2xx response and log the status code and error message. Stop the script with the Exit keyword.\ntry {\n    Get-Transforms -Filters "id eq"\n}\ncatch {\n    Write-Host $_.Exception.Response.StatusCode.value__\n    Write-Host $_.ErrorDetails\n    Exit\n}\n\nGet-AccessProfiles\n')))}y.isMDXComponent=!0}}]);